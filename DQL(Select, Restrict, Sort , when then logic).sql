USE HR;

SELECT * FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY FROM EMPLOYEES;


-- CONCATE

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, CONCAT(FIRST_NAME, " ", LAST_NAME) AS FULL_NAME, JOB_ID, SALARY FROM EMPLOYEES;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY FROM EMPLOYEES;


-- RESTRICT the data.( only see wanted data) (where clauese)

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE SALARY > 1500;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG';

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG' AND SALARY > 1500;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE SALARY > 10000 and SALARY < 12000;


-- BETWEEN operator

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE SALARY BETWEEN 10000 AND 12000;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;


-- WILDCARD search pattern matching (like operator)

SELECT * FROM EMPLOYEES;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID LIKE 'IT%';

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID LIKE '%IT%';

-- AFTER % IT CAN BE ANYTHING
-- S_D (_ CONTAINS SUITABLE VALUES OR CHARACTER)

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID LIKE 'S%';

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'S_E%';


-- ORDER BY (default is ascending)

SELECT * FROM EMPLOYEES;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY SALARY;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY SALARY DESC;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY SALARY DESC
LIMIT 5;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY JOB_ID, SALARY DESC;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY JOB_ID, SALARY;


-- POSITION WISW SORTING

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY 5;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY 5 DESC;

-- WHEN WE USE (ORDER BY 5(NUMBER) WHICH SORT THAT POSITION COLUMN)

SELECT * FROM EMPLOYEES
ORDER BY 6;


-- DESC OR DESCRIBE  (USED TO GET DESCRIPTION ABOUT ALL COLUMNS)

DESC EMPLOYEES;

DESCRIBE EMPLOYEES;


-- IN operator &  NOT IN operator

SELECT * FROM EMPLOYEES;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG' OR JOB_ID = 'ST_MAN' OR JOB_ID = 'SA_MAN';

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID IN ('IT_PROG','ST_MAN','SA_MAN');

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID NOT IN ('IT_PROG','ST_MAN','SA_MAN');


-- IF ELSE logic-- CASE WHEN THEN expression.
-- SIMPLE case and SEARCHED case expression.

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE COMMISSION_PCT WHEN NULL THEN 'NO COMMISSION EARNED' 
					WHEN NOT NULL THEN 'COMMISSION EARNED'
					END
					FROM EMPLOYEES;


SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE JOB_ID WHEN 'IT_PROG' THEN SALARY*0.5+SALARY
			WHEN 'SA_MAN' THEN SALARY*0.2+SALARY
			ELSE SALARY
			END UPDATED_SALARIES
			FROM EMPLOYEES;
            
SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE JOB_ID WHEN 'FI_ACCOUNT' THEN SALARY+1000
			WHEN 'AD_ASST' THEN SALARY+600
            ELSE SALARY
            END UPDATED_SALARIES
            FROM EMPLOYEES;


SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE WHEN 'IT_PROG' THEN SALARY*0.5+SALARY
	 WHEN EMPLOYEE_ID = 101 THEN SALARY-2000
	 WHEN LAST_NAME = 'De Haan' THEN SALARY*0.5+SALARY
	 ELSE SALARY
	 END UPDATED_SALARIES
	 FROM EMPLOYEES;
            

SELECT * FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, SALARY,
CASE  WHEN HIRE_DATE < 1989-09-21 THEN SALARY*100
				ELSE SALARY
                END UPDATED_SALARIES
                FROM EMPLOYEES;
 

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE JOB_ID WHEN 'IT_PROG' THEN (SALARY*0.5)+SALARY
			WHEN 'ST_MAN' THEN (SALARY*0.2)+SALARY
            ELSE SALARY
            END UPDATED_SALRIES
            FROM EMPLOYEES;


SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, SALARY,
CASE  WHEN HIRE_DATE < 1989-09-21 THEN SALARY*100
	  WHEN JOB_ID = 'AD_PRES' THEN SALARY-1000
      ELSE SALARY
	  END UPDATED_SALARIES
	  FROM EMPLOYEES;


SELECT * FROM EMPLOYEES;            

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT, HIRE_DATE,
CASE WHEN JOB_ID = 'IT_PROG' THEN (SALARY*0.5)+SALARY
	 WHEN EMPLOYEE_ID =100 THEN 'APPRAISAL NOT DONE'
     ELSE 'READY FOR APPRAISAL'
     END UPDATED_DETAILS
     FROM EMPLOYEES;
     
     
-- CONCATE CREATE NEW COLUMN

SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME, JOB_ID, SALARY FROM EMPLOYEES;

SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME, ' ', LAST_NAME)  COMPLETE_NAME, JOB_ID, SALARY FROM EMPLOYEES;


-- GROUPED FUNCTION/MULTIPLE ROW FUNCTION/AGGREGATE FUNCTION

SELECT * FROM EMPLOYEES;

SELECT SUM(SALARY), AVG(SALARY), MIN(SALARY), COUNT(SALARY) FROM EMPLOYEES;

SELECT JOB_ID, SUM(SALARY), AVG(SALARY), MIN(SALARY), COUNT(SALARY) FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT JOB_ID, SUM(SALARY), AVG(SALARY), MIN(SALARY), COUNT(SALARY) FROM EMPLOYEES
GROUP BY JOB_ID
HAVING SUM(SALARY)>30000;


-- HANDLING NULL VALUES (IFNULL AND COALESCE)

SELECT * FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY COMMISSION_PCT;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY COMMISSION_PCT DESC;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT, IFNULL(COMMISSION_PCT, 0) FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT, IFNULL(COMMISSION_PCT, 0.3) FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT, IFNULL(COMMISSION_PCT, AVG(COMMISSION_PCT)) FROM EMPLOYEES;

SELECT IFNULL(COMMISSION_PCT, AVG(COMMISSION_PCT)) FROM EMPLOYEES
GROUP BY COMMISSION_PCT;

SELECT AVG(COMMISSION_PCT) FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT, COALESCE(COMMISSION_PCT, SALARY, EMPLOYEE_ID) FROM EMPLOYEES;

SELECT IFNULL(COMMISSION_PCT, MIN(COMMISSION_PCT)) FROM EMPLOYEES
GROUP BY COMMISSION_PCT;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT, COALESCE(COMMISSION_PCT, SALARY, EMPLOYEE_ID) FROM EMPLOYEES;

