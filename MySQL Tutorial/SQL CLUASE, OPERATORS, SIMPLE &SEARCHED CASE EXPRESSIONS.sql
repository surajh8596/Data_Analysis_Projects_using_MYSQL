-- PARAMETERS IN MYSQL

-- 1. * -- FETCH COLUMN NAMES
-- 2. WHERE -- CONDITION
-- 3. GROUP BY -- GROUP DATA BY ONE OR MORE COLUMNS
-- 4. HAVING  -- WORK WITH GROUP BY CALUSE RETURN IF CONDITION IS SATIFY
-- 5. ORDER BY -- SORT THE DATA
-- 6. OFFSET  -- SPECIFYY WHICH ROW RETURNS FIRST, DEFAULT START WITH 0
-- 7. LIMIT  -- LIMIT THE NUMBER OF RECORDS RETURNED

-- 1. * 

USE HR;

SELECT * FROM EMPLOYEES;



-- 2. WHERE 

-- SINGLE CONDITION

SELECT * FROM EMPLOYEES
WHERE EMPLOYEE_ID >180;

-- MULTIPLE CONDITIONS
-- USING 'AND' LOGICAL OPERATOR
SELECT * FROM EMPLOYEES
WHERE SALARY>10000 AND SALARY <20000;

-- USING 'OR' LOGICAL OPERATOR
SELECT * FROM EMPLOYEES
WHERE SALARY > 10000 OR JOB_ID='AD_VP';

-- USING 'NOT' LOGICAL OPERATOR
SELECT * FROM EMPLOYEES
WHERE NOT SALARY>10000;

-- USING MULTIPLE LOGICAL OPERATOR
SELECT * FROM EMPLOYEES
WHERE (SALARY >20000 AND SALARY<30000) OR HIRE_DATE > '2000-01-01';


-- 3. ORDER BY
-- ASCENDING
SELECT SALARY FROM EMPLOYEES
ORDER BY SALARY ASC;

-- DESCENDING
SELECT SALARY FROM EMPLOYEES
ORDER BY SALARY DESC;

SELECT * FROM EMPLOYEES
ORDER BY HIRE_DATE DESC;

SELECT * FROM EMPLOYEES
ORDER BY FIRST_NAME DESC;

-- ORDER BY WITH WHERE CONDITION
SELECT * FROM EMPLOYEES
WHERE HIRE_DATE > '1998-01-01'
ORDER BY SALARY DESC;

-- ORDER BY WITH BOTH ASC & DESC
SELECT * FROM EMPLOYEES
ORDER BY JOB_ID ASC, SALARY DESC;

-- SORTING BY POSITION

SELECT * FROM EMPLOYEES
ORDER BY 6 ASC;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY 5;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY 5 DESC;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 4. GROUP BY WITH SUM, COUNT, MIN, MAX
SELECT  SALARY, JOB_ID FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT  SALARY, JOB_ID, COUNT(*) FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT  MAX(SALARY), JOB_ID FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT  MIN(SALARY), JOB_ID FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT AVG(SALARY), JOB_ID FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT  SUM(SALARY), JOB_ID, COUNT(*) FROM EMPLOYEES
GROUP BY JOB_ID;



-- 5. LIMIT

SELECT SALARY FROM EMPLOYEES
LIMIT 5;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
ORDER BY SALARY DESC
LIMIT 5;

SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES
ORDER BY FIRST_NAME
LIMIT 5; 
   


-- 5. OFFSET 
-- OFFSET can only be used with ORDER BY clause. It cannot be used on its own.

SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES
ORDER BY FIRST_NAME
LIMIT 5 OFFSET 3;


SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES
ORDER BY SALARY DESC
LIMIT 1 OFFSET 1;



-- 7. HAVING

SELECT * FROM EMPLOYEES
WHERE EMPLOYEE_ID >150
HAVING SALARY=10000;

SELECT * FROM EMPLOYEES
WHERE EMPLOYEE_ID >150
GROUP BY FIRST_NAME
HAVING SALARY=10000;


-- 8. BETWEEN
SELECT * FROM EMPLOYEES
WHERE EMPLOYEE_ID BETWEEN 100 AND 120;


-- 9. IS NULL & IS NOT NULL
SELECT * FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;

SELECT * FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;


-- 10. IN & NOT IN
SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG' OR JOB_ID = 'ST_MAN' OR JOB_ID = 'SA_MAN';

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID IN ('IT_PROG','ST_MAN','SA_MAN');

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID NOT IN ('IT_PROG','ST_MAN','SA_MAN');

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 11. HANDLING NULL VALUES
SELECT * FROM EMPLOYEES
ORDER BY COMMISSION_PCT DESC;

-- IF THE NULL ROW PRESENT THEN REPLACE IT WITH SOME NUMBER OR AVERAGE, MAX, MIN, SUM
SELECT COMMISSION_PCT, IFNULL(COMMISSION_PCT,0) AS UPDATED_COMS_PCT FROM EMPLOYEES;

SELECT AVG(COMMISSION_PCT) FROM EMPLOYEES;
SELECT COMMISSION_PCT, IFNULL(COMMISSION_PCT, AVG(COMMISSION_PCT)) AS UPDATED_COMS_PCT FROM EMPLOYEES;

SELECT IFNULL(COMMISSION_PCT, AVG(COMMISSION_PCT)) AS UPDATED_CMS_PCT FROM EMPLOYEES
GROUP BY COMMISSION_PCT;


-- 12. COALESCE FUNCTION
-- REPLACING NULL VALUE WITH SALARY
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT, COALESCE(COMMISSION_PCT, SALARY) FROM EMPLOYEES;

-- REPLACING NULL VALUES WITH JOB_ID
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT, COALESCE(COMMISSION_PCT, JOB_ID) FROM EMPLOYEES;



-- 13. WILDCARD search pattern matching
-- LIKE OPERATOR
-- AFTER % IT CAN BE ANYTHING
SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID LIKE 'IT%';

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE JOB_ID LIKE '%PR%';

-- S_D (_ CONTAINS SUITABLE VALUES OR CHARACTER)
SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT FROM EMPLOYEES
WHERE FIRST_NAME LIKE '__EX%';

 
-- 14. CONCATE 
-- CONCATE TO CREATE NEW COLUMN
SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME, JOB_ID, SALARY FROM EMPLOYEES;

SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME, ' ', LAST_NAME)  COMPLETE_NAME, JOB_ID, SALARY FROM EMPLOYEES;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 15. IF ELSE logic
-- CASE WHEN THEN expression.
-- SIMPLE case and SEARCHED case expression.
SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE COMMISSION_PCT WHEN NULL THEN 'NO COMMISSION EARNED' 
					WHEN NOT NULL THEN 'COMMISSION EARNED'
					END UPDATED_COMM_PCT
					FROM EMPLOYEES;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE JOB_ID WHEN 'IT_PROG' THEN SALARY*0.5+SALARY
			WHEN 'SA_MAN' THEN SALARY*0.2+SALARY
			ELSE SALARY
			END UPDATED_SALARIES
			FROM EMPLOYEES;
            
SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE JOB_ID WHEN 'FI_ACCOUNT' THEN SALARY+1000
			WHEN 'AD_ASST' THEN SALARY+600
            ELSE SALARY
            END UPDATED_SALARIES
            FROM EMPLOYEES;

SELECT EMPLOYEE_ID EMP_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE WHEN JOB_ID='IT_PROG' THEN SALARY*0.5+SALARY
	 WHEN EMPLOYEE_ID = 101 THEN SALARY-2000
	 WHEN LAST_NAME = 'De Haan' THEN SALARY*0.5+SALARY
	 ELSE SALARY
	 END UPDATED_SALARIES
	 FROM EMPLOYEES;
            
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, SALARY,
CASE  WHEN HIRE_DATE < '1989-09-21' THEN SALARY*10
				ELSE SALARY
                END UPDATED_SALARIES
                FROM EMPLOYEES;
 
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT,
CASE JOB_ID WHEN 'IT_PROG' THEN (SALARY*0.5)+SALARY
			WHEN 'ST_MAN' THEN (SALARY*0.2)+SALARY
            ELSE SALARY
            END UPDATED_SALRIES
            FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID, SALARY,
CASE  WHEN HIRE_DATE < '1989-09-21' THEN SALARY*10
	  WHEN JOB_ID = 'AD_PRES' THEN SALARY-1000
      ELSE SALARY
	  END UPDATED_SALARIES
	  FROM EMPLOYEES;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, JOB_ID, SALARY, COMMISSION_PCT, HIRE_DATE,
CASE WHEN JOB_ID = 'IT_PROG' THEN (SALARY*0.5)+SALARY
	 WHEN EMPLOYEE_ID =100 THEN 'APPRAISAL NOT DONE'
     ELSE 'READY FOR APPRAISAL'
     END UPDATED_DETAILS
     FROM EMPLOYEES;